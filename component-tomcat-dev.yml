#### Tomcat Application Server ####
application:
# Input Configuration parameters.
# In this section you can set input configuration parameters which you
# will be able to change later in reconfiguration
  configuration:
    input.quantity: 1 ### Hosts numbers
    input.app-port: 8080 ### Tomcat listen port
    input.operating-system: {image: "us-east-1/ami-1ba18d72", identity: ec2-user} ###  image/identity pair for describing Operating system.
    input.instance-size: "m1.small" ### EC2 Instance type
    input.java-opts: "-Duser.timezone=UTC" ### JAVA_OPTS
    input.recipe-url: "https://s3.amazonaws.com/qubell-starter-kit-artifacts/qubell-bazaar/component-tomcat-dev-cookbooks-stable-26d9846.tar.gz" ### Chef cookbooks url

# Root Application Interfaces.
# Here we describe a interfaces with pins and their bindings on components interfaces
# For binding using function bind(Component1#interface.pin, Component2#interface.pin)
  interfaces:
    input: ###Input values we want to manage from the root application
      quantity: "bind(workflow#input.quantity)"
      app-port: "bind(workflow#input.app-port)"
      java-opts: "bind(workflow#input.java-opts)"
      operating-system: "bind(workflow#input.operating-system)"
      instance-size: "bind(workflow#input.instance-size)"
      recipe-url: "bind(workflow#input.recipe-url)"
    app-meta:
      application-pic: "bind(metadata#output.application-pic)"
    tomcat: ### combined interface for actions/output pins
      build-app: "bind(workflow#actions.build-app)"
      deploy-libs: "bind(workflow#actions.deploy-libs)"
      deploy-war: "bind(workflow#actions.deploy-war)"
      reconfigure: "bind(workflow#actions.reconfigure)"
      manage-service: "bind(workflow#actions.manage-service)"
      app-hosts: "bind(workflow#result.app-hosts)"
      app-port: "bind(workflow#result.app-port)"

 ####### Components definitions ########

  components:
    metadata:
      type: cobalt.common.Constants
      interfaces:
        output:
          application-pic:
            type: publish-signal(map<string, object>)
            name: ""
      configuration:
        configuration.values:
          output.application-pic:
            large: "https://s3.amazonaws.com/qubell-images/tomcat.gif"
            small: "https://s3.amazonaws.com/qubell-images/tomcat.gif"
            small-height: 80
####  Component workflow ####
    workflow:
      type: workflow.Instance ### It's a  component type  to run imperative workflow
      interfaces: # Each component have interfaces wit pins
        input: # Contain pins with type: configuration().This type using for configuration parameters
          operating-system:
             type: configuration(map<string,object>)
             suggestions: # Create dropdown menu in advanced launch
                 "centos": {image: "us-east-1/ami-bf5021d6", identity: root}
                 "amazon": {image: "us-east-1/ami-1ba18d72", identity: ec2-user}
                 "ubuntu1204": {image: "us-east-1/ami-967edcff", identity: ubuntu}
                 "ubuntu1004": {image: "us-east-1/ami-9f3906f6", identity: ubuntu}
          app-port:
             type: configuration(int)
             name: Application port
          quantity:
             type: configuration(int)
             name: No. application hosts
          java-opts:
             type: configuration(string)
             name: JAVA_OPTS
          instance-size:
             type: configuration(string)
             name: EC2 instance type
          recipe-url:
             type: configuration(string)
             name: Cookbooks URL
        actions:
          build-app:
             type: receive-command(string git-uri, string app-branch => list<string> wars)
             name: Maven build
          deploy-libs:
             type: receive-command(list<string> lib-uri)
             name: Deploy libs
          deploy-war:
             type: receive-command(string uri, string path, object context-attrs, object context-nodes)
             name: Deploy war/jar
          reconfigure:
             type: receive-command(string java-opts)
             name: Reconfigure Tomcat
          manage-service:
             type: receive-command(string service-action)
             name: Manage service
        result:
          app-hosts:
             type: publish-signal(list<string>)
             name: Application hosts
          app-port:
             type: publish-signal(int)
             name: Application port

      configuration:
        configuration.triggers:
          input.quantity: update
        configuration.propagateStatus: [ update ]
        configuration.workflows:
          update: &update # main workflow used for provision/install phase
            steps:
              - provision-vm: ### Action "provisionAmazonVm" provision vm on Amazon EC2 and return  ips list
                  action: provisionVms
                  parameters:
                    roleName: default
                    hardwareId: "{$.instance-size}"
                    targetQuantity: "{$.quantity}"
                    vmIdentity: "{$.operating-system.identity}"
                    imageId: "{$.operating-system.image}"
                  output:
                    app-hosts: ips

              - tomcat-install: ### Action "chefsolo" search cookbooks archive by specified recipeUrl and run recipe descrbed in runList with provided attributes
                  action: "chefsolo"
                  precedingPhases: [ provision-vm ]
                  phase: tomcat-install
                  parameters:
                    retryCount: 3
                    roles: [ default ]
                    runList: ["recipe[cookbook-qubell-tomcat]"]
                    recipeUrl: "{$.recipe-url}"
                    jattrs:
                      tomcat:
                        port: "{$.app-port}"

            return: ### Values returned from workflow
              app-hosts:
                value: "{$.app-hosts}"
              app-port:
                value: "{$.app-port}"
          launch: *update

          build-app: ### Additional workflow for build application with maven and return artefacts list
            steps:
              - build-app: ### Action "chefrun" downloads cookbooks archive by specified recipeUrl and run recipe descrbed in runList with provided attributes
                  action: "chefrun"
                  phase: build-app
                  parameters:
                    isSolo: true
                    roles: [ default ]
                    runList: [ "recipe[cookbook-qubell-build]" ]
                    recipeUrl: "{$.recipe-url}"
                    jattrs:
                      scm:
                        repository: "{$.git-uri}"
                        revision: "{$.app-branch}"
                  output:
                    chefAttrs: chefState
            return: ### Values returned from workflow
              wars:
                value: "{$.chefAttrs['*'][0].cookbook-qubell-build.artifacts}"

          deploy-libs: ###  Additional Tomcat libraries installation workflow
            steps:
              - deploy-libs:
                  action: "chefrun"
                  phase: deploy-libs
                  parameters:
                    isSolo: true
                    roles: [ default ]
                    runList: [ "recipe[cookbook-qubell-tomcat::deploy_libs]" ]
                    recipeUrl: "{$.recipe-url}" 
                    jattrs:
                      cookbook-qubell-tomcat:
                        lib_uri: "{$.lib-uri}"

          deploy-war: ### Additional workflow for deploy artifacts(local/web) in your Tomcat webapps
            steps:
              - deploy-war:
                  action: "chefrun"
                  phase: deploy-war
                  parameters:
                    isSolo: true
                    roles: [ default ]
                    runList: [ "recipe[cookbook-qubell-tomcat::deploy_war]" ]
                    recipeUrl: "{$.recipe-url}"
                    jattrs:
                      cookbook-qubell-tomcat:
                        war:
                          uri: "{$.uri}"
                          path: "{$.path}"
                        context:
                          context_attrs: "{$.context-attrs}"
                          context_nodes: "{$.context-nodes}"
          reconfigure: ### Additional workflow for reconfiguring Tomcat in case changing app-port and java-opts
            steps:
              - reconfigure-tomcat:
                  action: "chefrun"
                  phase: reconfigure-tomcat
                  parameters:
                    isSolo: true
                    roles: [default]
                    runList: ["recipe[cookbook-qubell-tomcat]"]
                    recipeUrl: "{$.recipe-url}"
                    jattrs:
                      tomcat:
                        port: "{$.app-port}"
                        java_options: "{$.java-opts}"

          manage-service: ### ### Additional workflow for start/stop/restart service
            steps:
              - run-service-action:
                  action: "chefrun"
                  phase: "run-service-action"
                  parameters:
                    isSolo: true
                    roles: [default]
                    runList: ["recipe[cookbook-qubell-tomcat::manage]"]
                    recipeUrl: "{$.recipe-url}"
                    jattrs:
                      base:
                        manage:
                          services: ["tomcat6"]
                          action: "{$.service-action}"

